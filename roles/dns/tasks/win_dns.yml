---
- name: Windows | Set DNS address facts for the Primary Domain Controller
  set_fact:
    dns_server_1: 127.0.0.1
    dns_server_2: "{{ hostvars[groups['dns'][0]]['ansible_all_ipv4_addresses'][0] | default('8.8.8.8') }}"
  when: >
    inventory_hostname in groups['domain_controller'] and
    inventory_hostname == groups['domain_controller'][0]

- name: Windows | Set DNS address facts for Secondary Domain Controller or Workstation 
  set_fact:
    dns_server_1: "{{ hostvars[groups['domain_controller'][0]]['ansible_ip_addresses'] | ansible.netcommon.ipv4 | first | default('8.8.8.8') }}"
    dns_server_2: "{{ hostvars[groups['dns'][0]]['ansible_all_ipv4_addresses'][0] | default('8.8.8.8') }}"
  when: >
    inventory_hostname not in groups['domain_controller'] or
    inventory_hostname != groups['domain_controller'][0]

- name: Windows | Check if DNS servers are correct
  ansible.windows.win_shell: |
      $temp_object=(Get-DnsClientServerAddress -InterfaceIndex (Get-NetAdapter).InterfaceIndex -AddressFamily IPv4)

      $return_object = [PSCustomObject]@{
          interface = $temp_object.InterfaceAlias
          addresses = $temp_object.ServerAddresses
      }

      $return_object | ConvertTo-Json
  register: get_dns_script

- name: Windows | Process win_shell output
  set_fact:
    dns_client: "{{ get_dns_script.stdout | from_json }}"

- name: Windows | Update DNS servers addresses
  ansible.windows.win_shell: | 
      Set-DnsClientServerAddress -InterfaceIndex (Get-NetAdapter).InterfaceIndex -ServerAddresses ( "{{ dns_server_1 }}", "{{ dns_server_2 }}")
  when: dns_server_1 not in dns_client.addresses or dns_server_2 not in dns_client.addresses
  register: command_results

- name: Windows | Disable IPv6 for Secondary Domain Controller or Workstation 
  ansible.windows.win_shell: |
      Disable-NetAdapterBinding -Name * -ComponentID ms_tcpip6
  when: >
    inventory_hostname != groups['domain_controller'][0]
